apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-logs-pv
spec:
  storageClassName: my-shared-logs-pv
  capacity:
    storage: 1Gi # Could be e.q. 500Gi. Small amount is to preserve space when testing locally
  volumeMode: Filesystem # This declares that it will be mounted into pods as a directory
  accessModes:
    - ReadWriteOnce
  local:
    path: /tmp/kube
  nodeAffinity: ## This is only required for local, it defines which nodes can access it
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k3d-k3s-default-agent-0
# A note on persitent volumes
# When using a cloud provider, such as Google Kubernetes Engine which we shall use in parts 3 and 4, it is the cloud provider that takes care of
# backing storage and the Persistent Volumes that you can use. If you run your own cluster or use a local cluster such as k3s for development,
# you need to take care of the storage system and Persistent Volumes by yourself.

# An easy option that we can use with K3s is a local PersistentVolume that uses a path in a cluster node as the storage.
# This solution ties the volume to a particular node and if the node becomes unavailable, the storage is not usable.

# So the local Persistent Volumes are not the solution to be used in production!

# For the PersistentVolume to work you first need to create the local path in the node we are binding it to.
# Since our cluster runs via Docker let's create a directory at /tmp/kube in the container k3d-k3s-default-agent-0.
# This can simply be done via docker exec k3d-k3s-default-agent-0 mkdir -p /tmp/kube
