apiVersion: apps/v1
kind: Deployment
metadata:
  name: configmap-ping-log-app-dep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: configmap-ping-log-app
  template:
    metadata:
      labels:
        app: configmap-ping-log-app
    spec:
      containers:
        - name: ping-pong-service # ping pong write only
          image: mmiglioranza22/k8s-ex.2.06-ping-pong-service
          volumeMounts:
            - name: shared-logs
              mountPath: /usr/src/app/files
        - name: logger-service # logger writes/reads and GETS
          image: mmiglioranza22/k8s-ex.2.06-logger-service
          env:
            - name: VAR_FROM_CONFIGMAP # This is the name the source code will use to reference the configmap values
              valueFrom:
                configMapKeyRef:
                  name: configmap-ping-log-app-cm # the configmap from which the value comes.
                  key: MESSAGE # the key to fetch
            # - name: INFORMATION_FILE
            #   valueFrom:
            #     configMapKeyRef:
            #       name: configmap-ping-log-app-cm
            #       key: information.txt # This is used to reference the key in the configmap (the value "file.content" will be referenced as a key in volumes prop)
          volumeMounts:
            # remember 1 mount per volume (pv, configmap), mountPath must be unique for each
            - name: shared-logs
              mountPath: /usr/src/app/files
            - name: config-map
              mountPath: /usr/src/app/config
              # readOnly: true
      volumes:
        # Persistent volumes can be combined with configMaps volumes
        - name: shared-logs
          persistentVolumeClaim:
            claimName: shared-logs-claim
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config-map
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: configmap-ping-log-app-cm
# File is being mount alright, but mind this to check it:
# - the container that has the config file is logger-service.
# - accesing it via kubectl exec can(and will) chose a default container, which is ping-pong service (reason for which you will NOT see the config dir)
# - use lens or specify the specific container in the exec command // https://stackoverflow.com/questions/74552547/defaulted-container-container-1-out-of-container-1-container-2
#
#     kubectl exec -it pods/configmap-ping-log-app-dep-... -c logger-service -- sh // https://stackoverflow.com/questions/51247619/execute-bash-command-in-pod-with-kubectl
#
